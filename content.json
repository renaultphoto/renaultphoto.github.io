[{"title":"整合SSH的商品添加","date":"2017-05-01T03:07:59.000Z","path":"2017/05/01/sshwithproduct.html/","text":"写代码这件事和很多技术活一样，当你许久未接触之后就会生疏了。 前言整合ssh，搭建一个框架，将配置文件，基本类完成，实现产品添加入库。 目录 创建一个WEB项目并引入jar包引入框架的配置文件创建包结构和页面编写Action/Dao/ServiceSpring整合StrutsSpring整合hibernate添加事务管理运行程序参考 一、创建一个WEB项目并引入jar包SSH整合所需要的lib包 二、引入框架的配置文件 struts.xml applicationContext.xml web.xml log4j.properties 1、web.xml123456789101112131415161718 &lt;!-- Spring的框架的核心监听器 --&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt;&lt;!-- struts2的框架的核心过滤器的配置 --&gt;&lt;filter&gt; &lt;filter-name&gt;struts&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;struts&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 2、struts.xml1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;&lt;struts&gt;&lt;/struts&gt; 3、applicationContext.xml 12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;&lt;/beans&gt; 4、log4j.properties 12345678910111213141516171819202122232425262728log4j.rootLogger=WARN,stdout,logfilelog4j.appender.logfile=org.apache.log4j.RollingFileAppenderlog4j.appender.logfile.File=$&#123;catalina.home&#125;/logs/SSH.loglog4j.appender.logfile.MaxBackupIndex=100log4j.appender.logfile.MaxFileSize=1024KBlog4j.appender.logfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.logfile.layout.ConversionPattern=%d %p [%c] [%l] - %m%nlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=[%d %p]&gt;&gt; %l\\: - %m%nlog4j.logger.org.hibernate=ERRORlog4j.logger.org.hibernate.SQL=ERRORlog4j.logger.org.hibernate.cache=ERROR#ibatis rizhixiangguanlog4j.logger.com.ibatis=DEBUGlog4j.logger.com.ibatis.common.jdbc.SimpleDataSource=debuglog4j.logger.com.ibatis.common.jdbc.ScriptRunner=debuglog4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=debuglog4j.logger.java.sql.Connection=debuglog4j.logger.java.sql.Statement=debuglog4j.logger.java.sql.PreparedStatement=debug,stdout#ibatis rizhixiangguanlog4j.logger.org.springframework=ERRORlog4j.logger.org.springframework.aop.framework=ERRORlog4j.appender.CONSOLE=org.apache.log4j.RollingFileAppenderlog4j.appender.CONSOLE.File=$&#123;catalina.home&#125;/logs/SSHConsole.loglog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayoutlog4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;yyyy-MM-dd hh\\:mm\\:ss&#125; %-5p %c %x - %m%n 三、创建包结构和页面1、新建包结构如下： |-renault.ssh |-action |-model |-Product |-service |-dao 2、在model包下新建 Product.java实体类： 123456789101112131415161718192021222324252627282930package renault.ssh.model;/*** * 商品的实体类 * @author Renault * */public class Product &#123; private Integer pid; private String pname; private Double price; public Integer getPid() &#123; return pid; &#125; public void setPid(Integer pid) &#123; this.pid = pid; &#125; public String getPname() &#123; return pname; &#125; public void setPname(String pname) &#123; this.pname = pname; &#125; public Double getPrice() &#123; return price; &#125; public void setPrice(Double price) &#123; this.price = price; &#125; &#125; 3、新建添加商品页面addProduct.jsp 123456789101112131415161718192021222324252627282930313233&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;%@ taglib uri=&quot;/struts-tags&quot; prefix=&quot;s&quot; %&gt;&lt;%String path = request.getContextPath();String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;%&gt;&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;保存&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;保存商品的页面&lt;/h1&gt;&lt;!-- struts标签下有默认theme，如果自己用了simple就不会使用默认的样式 --&gt; &lt;s:form action=&quot;&quot; method=&quot;post&quot; namespace=&quot;/&quot; theme=&quot;simple&quot;&gt; &lt;table boder=&quot;1&quot; width=&quot;400px&quot;&gt; &lt;tr&gt; &lt;td&gt;商品名称&lt;/td&gt; &lt;td&gt;&lt;s:textfield name=&quot;pname&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;商品价格&lt;/td&gt; &lt;td&gt;&lt;s:textfield name=&quot;price&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td clospan=&quot;2&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/s:form&gt; &lt;/body&gt;&lt;/html&gt; 四、编写Action/Dao/Service1、在Action包下新建ProductAction.java 1234567891011121314151617181920212223242526272829package renault.ssh.action;import com.opensymphony.xwork2.ActionSupport;import com.opensymphony.xwork2.ModelDriven;import renault.ssh.model.Product;import renault.ssh.service.ProductService;/** * 商品管理的Action类 * @author Renault * */public class ProductAction extends ActionSupport implements ModelDriven&lt;Product&gt;&#123; //模型驱动使用的类 private Product product = new Product(); public Product getModel() &#123; return product; &#125; //struts和Sring整合过程中按名称自动注入的业务层类 private ProductService productService; public void setProducrService(ProductService productService) &#123; this.productService = productService; &#125;&#125; 2、在Service包下新建ProductService.java 12345678910111213141516171819package renault.ssh.service;import renault.ssh.dao.ProductDao;/** * 商品管理的服务类 * @author renault * */public class ProductService &#123; //业务层注入DAO的类 private ProductDao productDao; public void setProductDao(ProductDao productDao) &#123; this.productDao = productDao; &#125;&#125; 3、在Dao包下新建ProductDao.java 123456789101112package renault.ssh.dao;/** * 商品管理的Dao类 * @author Renault * */public class ProductDao &#123;&#125; 五、Spring整合Struts配置Action、Service、Dao类和配置文件 1、在applicationContext.xml里面配置action、dao、service类 1234567891011121314 &lt;!-- 配置Action的类 --&gt; &lt;!-- SCOPE的作用在于申明ACTION为多例模式 --&gt; &lt;bean id=&quot;productAction&quot; class=&quot;renault.ssh.action.ProductAction&quot; scope=&quot;prototype&quot;&gt; &lt;!-- 手动注入Service --&gt; &lt;property name=&quot;producrService&quot; ref=&quot;productService&quot;/&gt; &lt;/bean&gt; &lt;!--配置业务层的类 --&gt; &lt;bean id=&quot;productService&quot; class=&quot;renault.ssh.service.ProductService&quot;&gt; &lt;property name=&quot;productDao&quot; ref=&quot;productDao&quot; /&gt; &lt;/bean&gt; &lt;!-- 配置Dao的类 --&gt;&lt;bean id=&quot;productDao&quot; class=&quot;renault.ssh.dao.ProductDao&quot;&gt; &lt;/bean&gt; 2、配置struts.xml 12345&lt;package name=&quot;ssh&quot; extends=&quot;struts-default&quot; namespace=&quot;/&quot;&gt; &lt;!-- 由Spring管理的ACTION的class为Spring中的ID值，不再是类的全名 --&gt; &lt;action name=&quot;product_*&quot; class=&quot;productAction&quot; method=&quot;&#123;1&#125;&quot;&gt; &lt;/action&gt;&lt;/package&gt; 3、将addProduct.jsp里面的表单的action改成 action=&quot;product_save&quot; 4、在ProductAction.java里添加保存方法： 12345678/** * 保存商品 */ public String save()&#123; System.out.println(&quot;Action里面的save方法执行了&quot;); productService.save(product); return NONE; &#125; 5、在ProductService.java里添加保存方法： 123456789/** * 业务层保存商品 * @param product */ public void save(Product product) &#123; System.out.println(&quot;service里面的save方法执行了&quot;); productDao.save(product); &#125; 6、在ProductDao.java里添加保存方法： 1234567/** * Dao里面保存商品 * @param product */ public void save(Product product) &#123; System.out.println(&quot;Dao里面的save方法执行了&quot;); &#125; 7、启动服务器，运行addProduct.jsp,填写商品名称和价格后提交在控制台会打印123Action里面的save方法执行了Service里面的save方法执行了Dao里面的save方法执行了 六、Spring整合hibernate1、创建数据库；&gt;create database ssh;2、创建实体类的映射文件Product.hbm.xml 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot; &quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt; &lt;hibernate-mapping&gt; &lt;class name=&quot;renault.ssh.model.Product&quot; table=&quot;product&quot;&gt; &lt;id name=&quot;pid&quot; column=&quot;pid&quot;&gt; &lt;generator class=&quot;native&quot;/&gt; &lt;/id&gt; &lt;property name=&quot;pname&quot; column=&quot;pname&quot; length=&quot;20&quot;/&gt; &lt;property name=&quot;price&quot; column=&quot;price&quot;/&gt; &lt;/class&gt; &lt;/hibernate-mapping&gt; 3、添加配置文件 jdbc.properties: 12345678jdbc.driverClassName=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/sshjdbc.username=rootjdbc.password=adminjdbc.maxActive=2000jdbc.initialSize=20jdbc.maxWait=2000jdbc.minIdle=10 4、在applicationContext.xml配置hibernate 123456789101112131415161718192021222324252627282930313233&lt;!-- 引入外部的属性文件--&gt; &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;&lt;!-- 配置C3P0连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt; &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 配置hibernate相关属性 --&gt; &lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&gt; &lt;!--注入连接池 --&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;!-- 配置Hibernate的属性 --&gt; &lt;property name=&quot;hibernateProperties&quot;&gt; &lt;props&gt; &lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt; &lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt; &lt;prop key=&quot;hibernate.format_sql&quot;&gt;true&lt;/prop&gt; &lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;!-- 加载Hibernate中的映射文件 --&gt; &lt;property name=&quot;mappingResources&quot;&gt; &lt;list&gt; &lt;!-- 文件路径 --&gt; &lt;value&gt;renault/ssh/model/Product.hbm.xml&lt;/value&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt; 5、在applicationContext.xml中的DAO里面注入sessionFactory 1234&lt;!-- 配置Dao的类 --&gt;&lt;bean id=&quot;productDao&quot; class=&quot;renault.ssh.dao.ProductDao&quot;&gt; &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt; 6、修改ProductDao.java，调用模板完成保存的操作 12345678910111213141516171819202122232425package renault.ssh.dao;import org.springframework.orm.hibernate3.support.HibernateDaoSupport;import renault.ssh.model.Product;/** * 商品管理的Dao类 * @author Renault * *///注入sessionFactory必须继承HibernateDaoSupport public class ProductDao extends HibernateDaoSupport &#123;/** * Dao里面保存商品 * @param product */ public void save(Product product) &#123; System.out.println(&quot;Dao里面的save方法执行了&quot;);//调用模板的方法 this.getHibernateTemplate().save(product); &#125;&#125; 七、添加事务管理1、配置事务管理器，在applicationContext.xml添加如下代码： 1234567&lt;!--配置事务管理器 --&gt;&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&gt; &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 开启注解事务 --&gt;&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt; 2、给ProductService.java类添加注解@Transactional 八、运行程序 参考SSH整合所需要的lib包 慕课网-基于SSH实现员工管理系统之框架整合篇","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://renaultphoto.com/tags/java/"}]},{"title":"Yilia的配置（一）","date":"2017-02-01T15:05:59.000Z","path":"2017/02/01/blogwithhexo2.html/","text":"1、长篇幅文章首页显示 问题描述：如果文章篇幅过长，在首页显示文章列表的时候会将文章全部显示在首页，会影响博客的美观。 解决方案：使用 &lt;!– more –> 标签来隐藏其下面的内容 2、添加归档 问题描述：归档就是将您的博客按日期排序，形成一个流水账似的文章目录，快速查看自己的成果。 解决方案：在主题Yilia根目录下添加归档 123menu: 主页: / 归档: /archives","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://renaultphoto.com/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://renaultphoto.com/tags/blog/"}]},{"title":"Hexo搭建的小站","date":"2017-01-01T15:05:59.000Z","path":"2017/01/01/hello-world.html/","text":"在新年的第一天，看见同学邓沁把他的小站建起来，想起自己之前一直有想建个自己的网站，就能写点自己的读书笔记或者自己开发过程中遇到的一点问题，来记录自己的生活。看了看hexo，发现也不是很难，于是就跟风似的开启了建站之旅，也算是2017年第一个小进步。 准备工作需要的环境 Node.js 官网 //生成静态页面 Git 官网 //把本地的静态文件上传到Github的工具 Github 官网 //作为博客的服务器 将这Node.js、Git两个软件下载安装和在Github上创建repositories 就不讲了，网上教程太多。要学会自己搜索自己想要的东西^_^ 开始搭建创建页面文件选择一个路径创建你的blog文件夹，例如我的 C:\\hexo\\renaultblog 右键点击鼠标会有Git Bash Here点击之后，执行如下命令安装HEXO 1$ npm install hexo-cli -g 初始化文件 1$ hexo init 然后你就可以看见很多文件了。 _config.yml node_modules public source package.json themes scaffolds db.json 生成博客文件 1$ hexo generate 然后启动本地服务 1$ hexo server 在你的浏览器中输入http://localhost:4000，就能访问你的主页了。参考 landscape主题 部署到Github1、配置git //以下所有涉及邮箱的 renault@renault.com&#39;请改成你自己的邮箱 //设置自己的用户名(有空格) 1$ git config --global user.name &quot;renault@renault.com&quot; //设置自己的邮箱(有空格) 1$ git config --global user.email &quot;renault@renault.com&quot; //设置自己的远程仓库地址 1$ git remote add origin git@github.com:renault/renault.github.io.git //配置SSH KEY 1$ ssh-keygen -t rsa -C &quot;renault@renault.com&quot; 执行之后显示 Enter file in which to save the key (/home/you/.ssh/id_rsa):你就输入一个路径（存放密钥文件的地方），然后要求你输入密码，不填就可以了，然后你去你输入的路径下找到 .ssh目录下 id_rsa.pub复制到你的Github页面中点击自己头像有Setting-&gt;SSH and GPG keys-&gt;New SSH key里面。 //验证是否生效 1$ ssh -T git@github.com 如果是 1Hi renaultphoto!You&apos;ve successfully authenticated, but GitHub does not provide shell access. 那就是成功了。 2、修改博客文件找到根目录下的_config.yml文件（网上有另外一种配置方法，我遇到了坑就没选那种）， 1234deploy: type: git repository: git@github.com:renault/renault.github.io.git branch: master 3、上传到Github上在根目录也就是C:\\hexo\\renaultblog下面执行1$ git init 因为之前已经生成了部署文件，这时候只需要执行 1$ hexo deploy 出现如下提示就成功了12345678910INFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...[master 79a5c8f] Site updated: 2017-01-08 00:04:59 7 files changed, 29 insertions(+), 29 deletions(-) rewrite content.json (100%)Branch master set up to track remote branch master from git@github.com:renaultphoto/renaultphoto.github.io.git.To git@github.com:renaultphoto/renaultphoto.github.io.git af6bd3c..79a5c8f HEAD -&gt; masterINFO Deploy done: git 最后的最后访问你创建的repositories，有个setting,找到Github pages ,它会告诉你访问你博客的路径。比如 Your site is published at http://renaultphoto.com/。 参考使用Hexo搭建个人博客(基于hexo3.0) Hexo官网 写在最后第一次写教程，还有很多不完善的地方。请大家多多包涵，有什么问题在下方留言，我会尽快回复的。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://renaultphoto.com/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://renaultphoto.com/tags/blog/"}]}]